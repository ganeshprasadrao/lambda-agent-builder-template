version: 0.2

cache:
  paths:
    - '/root/.cache/pip/**/*'
    - '/root/.docker/**/*'

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 412381740399.dkr.ecr.us-west-1.amazonaws.com
      - REPOSITORY_URI=412381740399.dkr.ecr.us-west-1.amazonaws.com/dqx-ai/dqx-backend
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo Build started on `date`
      # Enable Docker BuildKit for better caching
      - export DOCKER_BUILDKIT=1
  build:
    commands:
      - echo Building the Docker image...
      - docker build --build-arg MY_GITHUB_TOKEN=${MY_GITHUB_TOKEN} --build-arg PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY} --build-arg GROQ_API_KEY=${GROQ_API_KEY} --build-arg DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY} --build-arg HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY} --build-arg HYPERBOLIC_API_KEY=${HYPERBOLIC_API_KEY} --build-arg TOGETHER_API_KEY=${TOGETHER_API_KEY} --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} --build-arg AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} --build-arg DATABASE_URL=${DATABASE_URL} --cache-from $REPOSITORY_URI:latest -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Pushing the Docker image...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - printf '[{"name":"dqx-image","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      # Create docker-compose.yml file for deployment
      - |
        cat > docker-compose-deploy.yml << 'EOL'
        version: "3.9"
        services:
          app:
            image: 412381740399.dkr.ecr.us-west-1.amazonaws.com/dqx-ai/dqx-backend:latest
            command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --timeout-keep-alive 60
            ports:
              - "8000:8000"
            environment:
              - DATABASE_URL=${DATABASE_URL}
              - MY_GITHUB_TOKEN=${MY_GITHUB_TOKEN}
              - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
              - GROQ_API_KEY=${GROQ_API_KEY}
              - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
              - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
              - HYPERBOLIC_API_KEY=${HYPERBOLIC_API_KEY}
              - TOGETHER_API_KEY=${TOGETHER_API_KEY}
              - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
              - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            depends_on:
              - rabbitmq
          celery_worker:
            image: 412381740399.dkr.ecr.us-west-1.amazonaws.com/dqx-ai/dqx-backend:latest
            command: celery -A app.celery worker --loglevel=info
            user: celery
            environment:
              - DATABASE_URL=${DATABASE_URL}
              - MY_GITHUB_TOKEN=${MY_GITHUB_TOKEN}
              - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
              - GROQ_API_KEY=${GROQ_API_KEY}
              - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
              - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
              - HYPERBOLIC_API_KEY=${HYPERBOLIC_API_KEY}
              - TOGETHER_API_KEY=${TOGETHER_API_KEY}
              - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
              - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            depends_on:
              - rabbitmq
          rabbitmq:
            image: rabbitmq:3-management
            ports:
              - "5672:5672"
              - "15672:15672"
        EOL

artifacts:
    files: 
      - imagedefinitions.json
      - docker-compose-deploy.yml
      - appspec.yml
      - build.sh